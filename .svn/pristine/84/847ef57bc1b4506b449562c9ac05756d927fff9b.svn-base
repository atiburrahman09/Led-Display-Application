using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Net.Configuration;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Windows.Forms;
using System.Data.SqlServerCe;
using HtmlAgilityPack;
using Lumex.Tech;
using Microsoft.Ink;
using System.Web;
using System.Net;


namespace LEDApp
{
    public partial class HomePage : Form
    {

        //private SqlConnection con = new SqlConnection("Data Source=LUMEX-05-PC;Initial Catalog=lmxLED;User ID=sa;Password=shv  321");
        //private SqlCommand cmd;

        public HomePage()
        {
            InitializeComponent();
        }


        ledcontrol.ILEDDevice PLed;
        ledcontrol.ICOMExtend PCom;//= new ledcontrol.COMControl();
        ledcontrol.IGPRSExtend PGprs;// = new ledcontrol.GPRSControl();
        ledcontrol.GPRSDevice pgsDevice;// = new ledcontrol.GPRSDevice();

        private void btnSave_Click(object sender, EventArgs e)
        {
            try
            {
                if (isUpdateMode)
                {

                    LumexDBPlayer db = LumexDBPlayer.Start(true);
                    db.ExecuteNonQuery("Update Device set DeviceId='" + txtbxDeviceId.Text + "',PostCode='" +
                            txtbxPostCode.Text + "',AreaId='" + txtbxAreaId.Text + "',UserName='" + txtbxUserName.Text + "',DeviceName='" + txtbxDeviceName.Text + "' where Id='" + hiddenField.Text + "'");

                    MessageBox.Show("Device Information Updated Successfully!!!");
                    db.Stop();
                    txtbxDeviceId.Text = "";
                    txtbxPostCode.Text = "";
                    txtbxDeviceName.Text = "";
                    txtbxUserName.Text = "";
                    txtbxAreaId.Text = "";
                    btnSave.Text = "Save";
                    isUpdateMode = false;
                    txtbxDeviceId.Enabled = true;
                    ShowAllDevice();
                }
                else
                {
                    LumexDBPlayer db = LumexDBPlayer.Start(true);
                    db.ExecuteNonQuery(
                            "Insert into Device (DeviceId,PostCode,AreaId,DeviceName,UserName) values('" + txtbxDeviceId.Text + "','" +
                            txtbxPostCode.Text + "','" + txtbxAreaId.Text + "','" + txtbxDeviceName.Text + "','" + txtbxUserName.Text + "')");

                    MessageBox.Show("Device Successfully Inserted!!!");
                    db.Stop();
                    txtbxDeviceId.Text = "";
                    txtbxPostCode.Text = "";
                    txtbxDeviceName.Text = "";
                    txtbxUserName.Text = "";
                    txtbxAreaId.Text = "";
                    ShowAllDisplaySetting();
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        private void btnAddDevice_Click(object sender, EventArgs e)
        {
            tabControl3.SelectTab(1);
        }

        private void btnDisplaySettings_Click(object sender, EventArgs e)
        {
            tabControl3.SelectTab(2);
        }

        private void btnDeviceSetting_Click(object sender, EventArgs e)
        {
            tabControl3.SelectTab(3);
        }

        private int ScheduleTime = 0;

        private static System.Timers.Timer aTimer;

        private void HomePage_Load(object sender, EventArgs e)
        {
            LoadDevice();
            ShowAllDevice();
            ShowAllDisplaySetting();
            //SetUpTimer(new TimeSpan(17, 04, 00));
            // Start the timer
            //aTimer.Enabled = true;
        }

        private System.Threading.Timer timer;
        //private void SetUpTimer(TimeSpan alertTime)
        //{
        //    DateTime current = DateTime.Now;
        //    TimeSpan timeToGo = alertTime - current.TimeOfDay;
        //    if (timeToGo < TimeSpan.Zero)
        //    {
        //        return;//time already passed
        //    }
        //    this.timer = new System.Threading.Timer( x =>
        //    {
        //        this.ShowMessageToUser();
        //    }, null, timeToGo, Timeout.Infinite);
        //}

        private void Callback(object state)
        {

            btnClearData.PerformClick();
            btnGetImageFromWeb.PerformClick();
            btnSendDuelLine.PerformClick();
        }

        private void ShowMessageToUser()
        {
            if (this.InvokeRequired)
            {
                this.Invoke(new MethodInvoker(this.ShowMessageToUser));
            }
            else
            {
                MessageBox.Show("Your message");
            }
        }

        //private void OnTimedEvent(Object source, System.Timers.ElapsedEventArgs e)
        //{
        //    // Console.WriteLine("The Elapsed event was raised at {0}", e.SignalTime);
        //    second = second + 1;
        //    //if (second >= 6000)
        //    {
        //        btnClearData.PerformClick();
        //        btnGetImageFromWeb.PerformClick();
        //        btnSendDuelLine.PerformClick();
        //        second = 0;
        //    }

        //}
        int second = 0;

        private void LoadDevice()
        {
            try
            {
                LumexDBPlayer db = LumexDBPlayer.Start(true);
                DataTable dt = db.ExecuteDataTable("SELECT Id , DeviceId ,DeviceName FROM Device");
                //SqlCommand command = new SqlCommand(query, con);
                db.Stop();

                combxDevice.DataSource = dt;
                combxDevice.DisplayMember = "DeviceName";
                combxDevice.ValueMember = "DeviceId";
                combxDevice.SelectedIndex = 0;

                logInDeviceComBx.DataSource = dt;
                logInDeviceComBx.DisplayMember = "DeviceName";
                logInDeviceComBx.ValueMember = "DeviceId";
                logInDeviceComBx.SelectedIndex = 0;
            }
            catch (Exception)
            {

                throw;
            }
        }

        private void btnSaveDisplaySetting_Click(object sender, EventArgs e)
        {

            try
            {
                if (isUpdateMode)
                {
                    LumexDBPlayer db = LumexDBPlayer.Start(true);
                    db.ExecuteNonQuery(
                            "Update DisplaySetting SET DeviceId='" + combxDevice.SelectedValue + "',Height='" + txtbxHeight.Text + "',Width='" + txtbxWidth.Text + "',Style='" +
                            combxStyle.SelectedValue + "',Animation='" + combxAnimation.SelectedValue + "',RegionTop='" + txtbxRegion1Top.Text + "',RegionLeft='" + txtbxRegion1Left.Text + "',Region2Top='" + txtbxRegion2Top.Text + "',Region2Left='" + txtbxRegion2Left.Text + "' where Id='" + hiddenField.Text + "'");
                    // cmd.ExecuteNonQuery();
                    MessageBox.Show("Display Settings Updated Successfully!!!");
                    db.Stop();
                    combxDevice.SelectedValue = 0;
                    combxStyle.SelectedValue = 0;
                    combxAnimation.SelectedValue = 0;
                    txtbxHeight.Text = "";
                    txtbxWidth.Text = "";
                    txtbxRegion1Top.Text = "";
                    txtbxRegion1Left.Text = "";
                    txtbxRegion2Top.Text = "";
                    txtbxRegion2Left.Text = "";
                    combxDevice.Enabled = true;
                    btnSaveDisplaySetting.Text = "Save";
                    ShowAllDisplaySetting();
                }
                else
                {
                    LumexDBPlayer db = LumexDBPlayer.Start(true);
                    db.ExecuteNonQuery(
                            "Insert into DisplaySetting (DeviceId,Height,Width,Style,Animation,RegionTop,RegionLeft) values('" +
                            combxDevice.SelectedValue + "','" + txtbxHeight.Text + "','" + txtbxWidth.Text + "','" +
                            combxStyle.SelectedValue + "','" + combxAnimation.SelectedValue + "','" + txtbxRegion1Top.Text + "','" + txtbxRegion1Left.Text + "','" + txtbxRegion2Top.Text + "','" + txtbxRegion2Left.Text + "')");
                    // cmd.ExecuteNonQuery();
                    MessageBox.Show("Display Settings Successfully Inserted!!!");
                    db.Stop();
                    combxDevice.SelectedValue = 0;
                    combxStyle.SelectedValue = 0;
                    combxAnimation.SelectedValue = 0;
                    txtbxHeight.Text = "";
                    txtbxWidth.Text = "";
                    txtbxRegion1Left.Text = "";
                    txtbxRegion1Top.Text = "";
                    txtbxRegion2Left.Text = "";
                    txtbxRegion2Top.Text = "";
                    ShowAllDisplaySetting();
                }

            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }
        //public void LoadDeviceListView()
        //{
        //    listViewDevice.Items.Clear();
        //    foreach (device devicelist in ShowAllDevice())
        //    {
        //        ListViewItem item = new ListViewItem();
        //        item.Text = devicelist.id.ToString();
        //        item.SubItems.Add(devicelist.DeviceId.ToString());
        //        item.SubItems.Add(devicelist.DeviceName);
        //        item.SubItems.Add(devicelist.UserName);
        //        item.SubItems.Add(devicelist.PostCode);
        //        item.SubItems.Add(devicelist.AreaId);
        //        item.Tag = devicelist;
        //        listViewDevice.Items.Add(item);
        //    }
        //}
        public void ShowAllDevice()
        {
            listViewDevice.Items.Clear();


            LumexDBPlayer db = LumexDBPlayer.Start(true);
            DataTable dt = db.ExecuteDataTable("SELECT Id , DeviceId , UserName , PostCode , DeviceName , AreaId FROM Device");
            db.Stop();


            //while (dt.Rows.Count > 0)
            //{
            //    device aDevice = new device();
            //    aDevice.id = (int)dt.Rows[0]["Id"];
            //    aDevice.DeviceId = (int)dt.Rows[0]["DeviceId"];
            //    aDevice.UserName = dt.Rows[0]["UserName"].ToString();
            //    aDevice.PostCode = dt.Rows[0]["PostCode"].ToString(); //Password
            //    aDevice.DeviceName = dt.Rows[0]["DeviceName"].ToString();
            //    aDevice.AreaId = dt.Rows[0]["AreaId"].ToString();
            //    deviceList.Add(aDevice);
            //}
            foreach (DataRow row in dt.Rows)
            {

                ListViewItem item = new ListViewItem(row[0].ToString());
                for (int i = 1; i < dt.Columns.Count; i++)
                {
                    item.SubItems.Add(row[i].ToString());
                }
                listViewDevice.Items.Add(item);
            }

        }
        private int deviceId;
        private int displayId;
        private bool isUpdateMode = false;
        private void listViewDevice_DoubleClick(object sender, EventArgs e)
        {
            // 1. Select selected Student

            ListViewItem item = listViewDevice.SelectedItems[0];
            int id = Convert.ToInt32(item.Text);

            //Selecting the Item of the list
            LumexDBPlayer db = LumexDBPlayer.Start(true);
            DataTable dt = db.ExecuteDataTable("SELECT Id , DeviceId , UserName , PostCode , DeviceName , AreaId FROM Device  where Id='" + id + "'");
            //SqlCommand command = new SqlCommand(query, con);
            db.Stop();
            //device aDevice = (device)item.Tag;

            //if (aDevice != null)
            //{
            //    //2. Enable update mode -- save button = update button, grab id

            isUpdateMode = true;

            //    deviceId = aDevice.id;


            //    //3. Fill Text with student data 
            btnSave.Text = "Update";
            hiddenField.Text = dt.Rows[0]["Id"].ToString();

            txtbxDeviceId.Text = dt.Rows[0]["DeviceId"].ToString();
            txtbxDeviceName.Text = dt.Rows[0]["DeviceName"].ToString();
            txtbxUserName.Text = dt.Rows[0]["UserName"].ToString();
            txtbxPostCode.Text = dt.Rows[0]["PostCode"].ToString();
            txtbxAreaId.Text = dt.Rows[0]["AreaId"].ToString();


        }

        //public void LoadDisplaySettingListView()
        //{
        //    listViewDisplay.Items.Clear();

        //    foreach (DisplaySetting displaylist in ShowAllDisplaySetting())
        //    {
        //        ListViewItem item = new ListViewItem();
        //        item.Text = displaylist.id.ToString();
        //        item.SubItems.Add(displaylist.DeviceId.ToString());
        //        item.SubItems.Add(displaylist.Height);
        //        item.SubItems.Add(displaylist.Width);
        //        item.SubItems.Add(displaylist.style);
        //        item.SubItems.Add(displaylist.Animation);
        //        item.Tag = displaylist;
        //        listViewDisplay.Items.Add(item);
        //    }
        //}
        public void ShowAllDisplaySetting()
        {
            listViewDisplay.Items.Clear();

            LumexDBPlayer db = LumexDBPlayer.Start(true);
            DataTable dt = db.ExecuteDataTable("SELECT Id , DeviceId , Height , Width , Style , Animation,RegionTop,RegionLeft,Region2Top,Region2Left FROM DisplaySetting");

            db.Stop();

            foreach (DataRow row in dt.Rows)
            {
                ListViewItem item = new ListViewItem(row[0].ToString());
                for (int i = 1; i < dt.Columns.Count; i++)
                {
                    item.SubItems.Add(row[i].ToString());
                }
                listViewDisplay.Items.Add(item);
            }
            //SqlDataReader reader = command.ExecuteReader();


            //while (dt.Rows.Count > 0)
            //{
            //    DisplaySetting displaySetting = new DisplaySetting();
            //    displaySetting.id = (int)dt.Rows[0]["Id"];
            //    displaySetting.DeviceId = (int)dt.Rows[0]["DeviceId"];
            //    displaySetting.Height = dt.Rows[0]["Height"].ToString();
            //    displaySetting.Width = dt.Rows[0]["Width"].ToString();
            //    displaySetting.style = dt.Rows[0]["Style"].ToString();
            //    displaySetting.Animation = dt.Rows[0]["Animation"].ToString();



            //    displayList.Add(displaySetting);


            //}


        }

        private void listViewDisplay_DoubleClick(object sender, EventArgs e)
        {


            ListViewItem item = listViewDisplay.SelectedItems[0];
            int id = Convert.ToInt32(item.Text);


            LumexDBPlayer db = LumexDBPlayer.Start(true);
            DataTable dt = db.ExecuteDataTable("SELECT Id , DeviceId , Height , Width , Style , Animation,RegionTop, RegionLeft ,Region2Top, Region2Left FROM DisplaySetting where id='" + id + "'");

            db.Stop();

            isUpdateMode = true;
            btnSaveDisplaySetting.Text = "Update";

            hiddenField.Text = dt.Rows[0]["Id"].ToString();
            txtbxHeight.Text = dt.Rows[0]["Height"].ToString();
            txtbxWidth.Text = dt.Rows[0]["Width"].ToString();
            txtbxRegion1Top.Text = dt.Rows[0]["RegionTop"].ToString();
            txtbxRegion1Left.Text = dt.Rows[0]["RegionLeft"].ToString();
            txtbxRegion2Top.Text = dt.Rows[0]["Region2Top"].ToString();
            txtbxRegion2Left.Text = dt.Rows[0]["Region2Left"].ToString();
            combxStyle.SelectedValue = dt.Rows[0]["Style"].ToString();
            combxDevice.SelectedValue = dt.Rows[0]["DeviceId"].ToString();
            combxAnimation.SelectedValue = dt.Rows[0]["Animation"].ToString();


        }
        private void btnLogin_Click(object sender, EventArgs e)
        {

            PGprs = new ledcontrol.GPRSControl();

            DataTable dt = GetUserPassWordByDeviceId(logInDeviceComBx.SelectedValue);
            DataTable dtTime = GetHeightWidth(logInDeviceComBx.SelectedValue);
            ScheduleTime = Convert.ToInt32(dtTime.Rows[0]["ScheduleTime"].ToString());

            PGprs.Host = System.Configuration.ConfigurationManager.AppSettings["Host"];//"42.121.6.228";
            PGprs.Port = int.Parse(System.Configuration.ConfigurationManager.AppSettings["Port"]);//int.Parse("9099");


            //Select Device ID User and Pass and Device serial


            PGprs.UserName = dt.Rows[0]["UserName"].ToString();//"szlccl";
            PGprs.PassWord = dt.Rows[0]["PostCode"].ToString();//"123456";

            PGprs.DeviceMgr.refresh();
            string dn = (logInDeviceComBx.SelectedValue).ToString();//PGprs.DeviceMgr.Items[8]; // Put Device Serial Here 
            Boolean IsOnLine3 = PGprs.DeviceMgr.OnLineByIndex[8];
            Boolean IsOnLine = PGprs.DeviceMgr.OnLineByID[dn];

            if (!IsOnLine)
            {
                lblVerify.Text = "✓";
                lblVerify.ForeColor = Color.Green;
            }
            else
            {
                lblVerify.Text = "X";
                lblVerify.ForeColor = Color.Red;
            }
            //Boolean IsOnLine1 = PGprs.DeviceMgr.get_OnLineByID(dn);
            //Boolean IsOnLine2 = PGprs.DeviceMgr.get_OnLineByIndex(8);
            //if (IsOnLine)
            //    MessageBox.Show("equipment:" + dn + " Online");
            //else
            // Connection device object, a plurality of equipment ',' Split

            PLed = PGprs.Device;
            PGprs.TargetDeviceID = dn;// The Selected One


            //aTimer = new System.Timers.Timer();
            //aTimer.Interval = ScheduleTime;

            // Alternate method: create a Timer with an interval argument to the constructor.
            // aTimer = new System.Timers.Timer(6000);

            // Create a timer with a Defined second interval.
            //aTimer = new System.Timers.Timer(6000);

            // Hook up the Elapsed event for the timer. 
            //aTimer.Elapsed += OnTimedEvent;

            // Have the timer fire repeated events (true is the default)
            //aTimer.AutoReset = true;



        }

        private DataTable GetUserPassWordByDeviceId(object p)
        {
            LumexDBPlayer db = LumexDBPlayer.Start(true);
            DataTable dt = db.ExecuteDataTable("SELECT Id , DeviceId , UserName , PostCode , DeviceName FROM Device");
            //SqlCommand command = new SqlCommand(query, con);
            db.Stop();

            return dt;
        }

        private void btnClearData_Click(object sender, EventArgs e)
        {
            try
            {
                PLed.ClearScreen();
            }
            catch (Exception)
            {

                // throw;
            }
        }
        public List<string> ImageList = new List<string>();
        private void btnGetImageFromWeb_Click(object sender, EventArgs e)
        {

            // string filepath = @"C:";
            //string path = System.Reflection.Assembly.GetExecutingAssembly().Location;

            //To get the location the assembly normally resides on disk or the install directory
            //string path = System.Reflection.Assembly.GetExecutingAssembly().CodeBase;

            //once you have the path you get the directory with:
            // var directory = System.IO.Path.GetDirectoryName(path + "TEST.jpg");


            try
            {
                WebClient x = new WebClient();
                DataTable dt = GetImageUrl(logInDeviceComBx.SelectedValue);
                //string url = System.Configuration.ConfigurationManager.AppSettings["Host"];
                string ImageUrl = dt.Rows[0]["AreaId"].ToString();//AreaId is Web Url for downloading Image
                // string source = x.DownloadString(@"http://180.211.159.172/damweb/PublicPortal/commodity_name/");
                string source = x.DownloadString(ImageUrl);

                HtmlAgilityPack.HtmlDocument document = new HtmlAgilityPack.HtmlDocument();
                document.LoadHtml(source);

                foreach (HtmlNode link in document.DocumentNode.SelectNodes("//a"))
                {

                    if (link.InnerHtml.Contains(".jpeg"))
                    {
                        ImageList.Add(link.InnerHtml);
                    }

                }
                string currentPath = Directory.GetCurrentDirectory();
                DateTime.Now.ToShortDateString();

                string newPath = DateTime.Now.ToString("dd-MM-yyyy");
                if (!Directory.Exists(Path.Combine(currentPath, newPath)))
                {
                    Directory.CreateDirectory(Path.Combine(currentPath, newPath));
                    foreach (string name in ImageList)
                    {
                        WebClient webClient = new WebClient();
                        //string url = "http://180.211.159.172/damweb/PublicPortal/commodity_name/" + name;
                        string url = ImageUrl + name;
                        string path = currentPath + @"\" + newPath + @"\";
                        webClient.DownloadFile(url, path + name);

                    }
                }
                else
                {
                    foreach (string name in ImageList)
                    {
                        WebClient webClient = new WebClient();
                        //string url = "http://180.211.159.172/damweb/PublicPortal/commodity_name/" + name;
                        string url = ImageUrl + name;
                        string path = currentPath + @"\" + newPath + @"\";
                        webClient.DownloadFile(url, path + name);

                    }
                }

                MessageBox.Show("Image Downloaded Successfully");


            }
            catch (Exception)
            {

                MessageBox.Show("Image Downloaded Failed");
            }

        }

        private void tabControl3_Click(object sender, System.EventArgs e)
        {
            LoadDevice();
        }

        private void btnSendDataImg_Click(object sender, EventArgs e)
        {
            try
            {

                int k = 0;

                DataTable dt = GetHeightWidth(logInDeviceComBx.SelectedValue);
                string currentPath = Directory.GetCurrentDirectory();
                DateTime.Now.ToShortDateString();
                string newPath = DateTime.Now.ToString("dd-MM-yyyy");
                newPath = currentPath + @"\" + newPath;
                string[] filePaths = Directory.GetFiles(newPath, "*.jpeg");
                Array.Sort(filePaths, StringComparer.InvariantCulture);
                decimal totalPrograme = ((filePaths.Length) / 8);
                totalPrograme = Math.Ceiling(totalPrograme);



                for (int i = 0; i < totalPrograme; i++)
                {
                    ledcontrol.LEDProgram Program1 = new ledcontrol.LEDProgram();
                    ledcontrol.LEDRegion Region1Top = new ledcontrol.LEDRegion();

                    Program1.LEDKind = ledcontrol.LEDKind.lkSingle;
                    // Screen monochrome color Type Single = 0, Double = 1 color, lkMultiple = 2 tricolor,
                    Program1.ProgramID = 4 + i;
                    // Program number> = 5 corresponds to the client program number id + 4
                    Program1.PlayMode = 0; //Broadcast mode
                    Program1.PlayModeValue = 1; //Show player
                    Program1.FromDate = System.Convert.ToDateTime("2000-01-01"); //"2000-01-01";          //Validity start
                    Program1.ToDate = System.Convert.ToDateTime("2199-01-01");
                    //"2000-01-01";          //Validity start"2199-01-01";            //有效期结束
                    Program1.Weeks = "1,2,3,4,5,6,7"; //Play Days Monday to weeks5 :'1,2,3,4,5'

                    Program1.Width = 512; //width
                    Program1.Height = 48; //height            
                    Program1.ProgramName = "SImage" + i; //Program Title
                    Program1.ClearHours(); //Cloudy periods
                    Program1.AddHours(System.Convert.ToDateTime("00:00"), System.Convert.ToDateTime("23:59")); //Add hours
                    Program1.IsInsert = false; //Whether spots are generally useless
                    Program1.IsPlayingTime = false;
                    Program1.ClearRegions();


                    Region1Top.RegionId = 1; //Partition No.   1~8 

                    Region1Top.Mode = ledcontrol.LEDRegionMode.rmStatic; //default
                    Region1Top.Left = 0;
                    //Convert.ToInt32(dt.Rows[0]["RegionLeft"].ToString());                           // Left Margin   x
                    Region1Top.Top = 0;
                    //Convert.ToInt32(dt.Rows[0]["RegionTop"].ToString());                           //Top margin    y
                    Region1Top.Width = Convert.ToInt32(dt.Rows[0]["Width"].ToString());//496;  //width      w
                    Region1Top.Height = Convert.ToInt32(dt.Rows[0]["Height"].ToString());//48; 


                    for (int j = 0; j < 8; j++, k++)
                    {
                        if (k < filePaths.Length)
                        {
                            ledcontrol.IPictureElement PicEle = new ledcontrol.PictureElement();

                            PicEle.Height = 48;
                            PicEle.Width = 496;
                            //PicEle.Mode = 1;// Image Type
                            PicEle.BoderStyle = 1; // Type of border
                            PicEle.AnimateStyle = 0; // Animated
                            PicEle.AnimateSpeed = 8; // Movement speed
                            PicEle.AnimateDelay = 0; // Residence time

                            //PicEle.LoadFromFile(@filePaths[j]); // Load picture
                            //PicEle.LoadFromFile(@"E:\Atib\Projects\LEDApp\LEDApp\bin\Debug\02-04-2016\crop13.png");
                            PicEle.LoadFromFile(filePaths[k]);
                            Region1Top.AddElment(PicEle);
                        }
                        else
                        {
                            break;
                        }

                    }
                    Program1.AddRegions(Region1Top);

                    PLed.SendProgram(Program1);
                    // PLed.SendRamProgram(Program1);
                }

                MessageBox.Show("Data Send Successfully");
            }

            catch (Exception)
            {

                MessageBox.Show("Data Send Failed");
            }

        }

        private DataTable GetHeightWidth(object DeviceId)
        {
            LumexDBPlayer db = LumexDBPlayer.Start(true);
            DataTable dt = db.ExecuteDataTable("SELECT Id , DeviceId , Height , Width , Style , Animation,RegionTop,RegionLeft ,Region2Top,Region2Left,ScheduleTime FROM DisplaySetting where Deviceid='" + DeviceId + "'");
            //SqlCommand command = new SqlCommand(query, con);
            db.Stop();

            return dt;
        }

        private DataTable GetImageUrl(object DeviceId)
        {
            LumexDBPlayer db = LumexDBPlayer.Start(true);
            DataTable dt = db.ExecuteDataTable("SELECT Id , DeviceId, AreaId  FROM Device where Deviceid='" + DeviceId + "'");
            //SqlCommand command = new SqlCommand(query, con);
            db.Stop();

            return dt;
        }


        private void btnSendDuelLine_Click(object sender, EventArgs e)
        {
            try
            {

                int k = 0;
                int w = 0;
                int r = 0;

                string[] imageName = new string[50];
                // string[] WholeSaleImage = new string[50];
                //string[] RetailImage = new string[50];

                List<string> WholeSaleImage = new List<string>();
                List<string> RetailImage = new List<string>();


                DataTable dt = GetHeightWidth(logInDeviceComBx.SelectedValue);
                string currentPath = Directory.GetCurrentDirectory();
                DateTime.Now.ToShortDateString();
                string newPath = DateTime.Now.ToString("dd-MM-yyyy");
                newPath = currentPath + @"\" + newPath;
                string[] filePaths = Directory.GetFiles(newPath, "*.jpeg");
                Array.Sort(filePaths, StringComparer.InvariantCulture);
                for (int i = 0; i < filePaths.Length; i++)
                {
                    imageName[i] = filePaths[i].Replace(newPath, "").ToString();
                    //string test = imageName[i].Substring(0, 2);
                    if (imageName[i].Substring(0, 2) == "\\w")
                    {
                        // WholeSaleImage[w++] = newPath + imageName[i];
                        WholeSaleImage.Insert(w++, newPath + imageName[i]);

                    }
                    else
                    {
                        RetailImage.Insert(r++, newPath + imageName[i]);
                        // RetailImage[r++] = newPath + imageName[i];
                    }
                }


                w = 0;
                r = 0;
                //
                double totalPrograme = ((filePaths.Length) / 16.00);
                totalPrograme = Math.Ceiling(totalPrograme);



                //for (int i = 0; i < totalPrograme; i++)
                //{

                for (int i = 0; i < totalPrograme; i++)
                {

                    ledcontrol.LEDProgram Program1 = new ledcontrol.LEDProgram();


                    Program1.LEDKind = ledcontrol.LEDKind.lkSingle;
                    // Screen monochrome color Type Single = 0, Double = 1 color, lkMultiple = 2 tricolor,
                    Program1.ProgramID = 4 + i;
                    // Program number> = 5 corresponds to the client program number id + 4
                    Program1.PlayMode = 0; //Broadcast mode
                    Program1.PlayModeValue = 2; //Show player prev 1
                    Program1.FromDate = System.Convert.ToDateTime("2000-01-01"); //"2000-01-01";          //Validity start
                    Program1.ToDate = System.Convert.ToDateTime("2199-01-01");
                    //"2000-01-01";          //Validity start"2199-01-01";            //有效期结束
                    Program1.Weeks = "1,2,3,4,5,6,7"; //Play Days Monday to weeks5 :'1,2,3,4,5'

                    Program1.Width = 512; //width
                    Program1.Height = 96; //height            
                    Program1.ProgramName = "DAM" + DateTime.Now.ToString("dd") + i; ; //Program Title
                    Program1.ClearHours(); //Cloudy periods
                    Program1.AddHours(System.Convert.ToDateTime("00:00"), System.Convert.ToDateTime("23:59")); //Add hours
                    Program1.IsInsert = false; //Whether spots are generally useless
                    Program1.IsPlayingTime = false;
                    Program1.ClearRegions();





                    int rgn = 1;

                    for (int m = 0; m < 2; m++)
                    {
                        ledcontrol.LEDRegion Region1Top = new ledcontrol.LEDRegion();
                        Region1Top.RegionId = m + 1; //Partition No.   1~8 

                        Region1Top.Mode = ledcontrol.LEDRegionMode.rmStatic; //default

                        if (rgn == 1)
                        {
                            Region1Top.Left = 0;
                            //Convert.ToInt32(dt.Rows[0]["RegionLeft"].ToString());  
                            // Left Margin   x
                            Region1Top.Top = 0;//Convert.ToInt32(dt.Rows[0]["RegionTop"].ToString());  
                            //rgn = 0;

                        }
                        else
                        {
                            Region1Top.Left = 0;//Convert.ToInt32(dt.Rows[0]["Region1Left"].ToString());  
                            Region1Top.Top = 48;//Convert.ToInt32(dt.Rows[0]["Region1Top"].ToString());  

                        }
                        //Convert.ToInt32(dt.Rows[0]["RegionTop"].ToString());                           //Top margin    y
                        Region1Top.Width = 496; //Convert.ToInt32(dt.Rows[0]["Width"].ToString()); //width      w
                        Region1Top.Height = 48; //Convert.ToInt32(dt.Rows[0]["Height"].ToString());


                        if (rgn == 1)
                        {
                            rgn = 0;
                            for (int j = 0; j < 8; j++, w++)
                            {
                                if (w < WholeSaleImage.Count)
                                {
                                    ledcontrol.IPictureElement PicEle = new ledcontrol.PictureElement();
                                    PicEle.Width = 496;
                                    PicEle.Height = 48;

                                    //PicEle.Mode = 1;// Image Type
                                    PicEle.BoderStyle = 0; // Type of border
                                    PicEle.AnimateStyle = 0; // Animated
                                    PicEle.AnimateSpeed = 15; // Movement speed
                                    PicEle.AnimateDelay = 0; // Residence time

                                    //PicEle.LoadFromFile(@filePaths[j]); // Load picture
                                    //PicEle.LoadFromFile(@"E:\Atib\Projects\LEDApp\LEDApp\bin\Debug\02-04-2016\crop13.png");
                                    PicEle.LoadFromFile(WholeSaleImage[w]);
                                    Region1Top.AddElment(PicEle);
                                }
                                else
                                {
                                    break;
                                }
                            }
                            Program1.AddRegions(Region1Top);


                        }
                        else
                        {
                            for (int j = 0; j < 8; j++, r++)
                            {
                                if (r < RetailImage.Count)
                                {
                                    ledcontrol.IPictureElement PicEle = new ledcontrol.PictureElement();
                                    PicEle.Width = 496;
                                    PicEle.Height = 48;

                                    //PicEle.Mode = 1;// Image Type
                                    PicEle.BoderStyle = 0; // Type of border
                                    PicEle.AnimateStyle = 0; // Animated
                                    PicEle.AnimateSpeed = 15; // Movement speed
                                    PicEle.AnimateDelay = 0; // Residence time

                                    //PicEle.LoadFromFile(@filePaths[j]); // Load picture
                                    //PicEle.LoadFromFile(@"E:\Atib\Projects\LEDApp\LEDApp\bin\Debug\02-04-2016\crop13.png");
                                    PicEle.LoadFromFile(RetailImage[r]);
                                    Region1Top.AddElment(PicEle);
                                }
                                else
                                {
                                    break;
                                }
                            }
                            Program1.AddRegions(Region1Top);
                        }

                    }


                    // PLed.SendRamProgram(Program1);

                    PLed.SendProgram(Program1);
                }


                //}

                MessageBox.Show("Data Send Successfully");
            }

            catch (Exception)
            {

                MessageBox.Show("Data Send Failed");
            }
        }



    }
}
